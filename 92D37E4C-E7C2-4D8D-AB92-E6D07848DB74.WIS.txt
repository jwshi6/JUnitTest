import java.util.Arrays;
import java.util.Comparator;
 


/*
Input: Number of Jobs n = 4
       Job Details {Start Time, Finish Time, Profit}
       Job 1:  {1, 2, 50} 
       Job 2:  {3, 5, 20}
       Job 3:  {6, 19, 100}
       Job 4:  {2, 100, 200}
Output: The maximum profit is 250.
*/




class Task
{
    int start, finish, profit;
 
    Task(int start, int finish, int profit)
    {
        this.start = start;
        this.finish = finish;
        this.profit = profit;
    }
}


 

class TaskComparator implements Comparator<Task>
{
    public int compare(Task a, Task b)
    {
        return a.finish < b.finish ? -1 : a.finish == b.finish ? 0 : 1;
    }
}
 



public class WeightedIntervalScheduling
{
   
    static public int binarySearch(Task tasks[], int index)
    {
      /* A Binary Search based function to find the latest job
      (before current job) that doesn't conflict with current
      job.  "index" is index of the current job.  This function
      returns -1 if all jobs before index conflict with it.
      The array jobs[] is sorted in increasing order of finish
      time. */

      int left = 0, right = index - 1;
 
      while (left <= right)
        {
            int mid = (left + right) / 2;
            if (tasks[mid].finish <= tasks[index].start)
            {
                if (tasks[mid + 1].finish <= tasks[index].start)
                    left = mid + 1;
                else
                    return mid;
            }
            else
                right = mid - 1;
        }
 
        return -1;
    }
 
    

    static public int schedule(Task tasks[])
    {
        
        Arrays.sort(tasks, new TaskComparator());
 
       
        int n = tasks.length;
        int table[] = new int[n];
        table[0] = tasks[0].profit;
 
        
        for (int i=1; i<n; i++)
        {
            int CurrentProf = tasks[i].profit;
            int BS = binarySearch(jobs, i);
            if (BS != -1)
                CurrentProf += table[BS];
 
            table[i] = Math.max(CurrentProf, table[i-1]);
        }
 
        return table[n-1];
    }
 
    
    public static void main(String[] args)
    {
        Task tasks[] = {new Task(1, 2, 50), new Task(3, 5, 20),
                      new Task(6, 19, 100), new Task(2, 100, 200)};
 
        System.out.println("Optimal profit is " + schedule(tasks));
    }
}